{
    "docs": [
        {
            "location": "/", 
            "text": "Lively Video Documentation", 
            "title": "Home"
        }, 
        {
            "location": "/#lively-video-documentation", 
            "text": "", 
            "title": "Lively Video Documentation"
        }, 
        {
            "location": "/upload/", 
            "text": "Lively Upload\n\n\nInstallation\n\n\nnpm install @lively-video/upload --save\n\n\n\n\nUsage\n\n\n// With UI\nimport Upload from '@lively-video/upload';\nconst upload = new Upload(element, options);\n\n// Without UI\nimport UploadCore from '@lively-video/upload/core';\nconst uploadCore = new UploadCore(element, options);\n\n\n\n\nConfiguration\n\n\nYou can customize your Lively Upload by passing an options object when instantiating the library.\n\n\nExample config:\n\n\nimport Upload from '@lively-video/upload';\n\n// new Upload(targetElement, options);\nconst myUpload = new Upload('#upload', {\n    url: '/my-upload-route'\n});\n\n\n\n\nConfiguration Options\n\n\n\n\nYou can supply Upload and UploadForm with either a DOM Element or a selector tag.\n\n\n\n\nUpload\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\n(string)\n\n\n(Required) Route to your upload api.\n\n\n\n\n\n\nauthUrl\n\n\n(string)\n\n\n(Required) Route to your auth api.\n\n\n\n\n\n\ntoken\n\n\n(string)\n\n\nDefaults to null. Use custom token.\n\n\n\n\n\n\nredirect\n\n\n(string)\n\n\nDefaults to null. The redirect route to your results template for cross-origin form compatibility.\n\n\n\n\n\n\nsupportLegacy\n\n\n(bool)\n\n\nDefaults to true. Turn legacy support on or off.\n\n\n\n\n\n\nforceLegacy\n\n\n(bool)\n\n\nDefaults to false. Helpful option to force use of legacy form for debugging.\n\n\n\n\n\n\nautoSubmit\n\n\n(bool)\n\n\nDefaults to true. Automatically upload file when added to the uploader.\n\n\n\n\n\n\nhttps\n\n\n(bool)\n\n\nDefaults to false. Set protocol.\n\n\n\n\n\n\nMESSAGES\n\n\n(object)\n\n\n(Localization) Object containing list of message names and message strings.\n\n\n\n\n\n\n\n\nUploadForm\n\n\n\n\nThe UploadForm library includes Upload options in addition to these.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclickable\n\n\n(bool)\n\n\nDefaults to true. UploadForm element opens file select on click.\n\n\n\n\n\n\ntitle\n\n\n(string)\n\n\nTitle text\n\n\n\n\n\n\nsubtitle\n\n\n(string)\n\n\nSubtitle text\n\n\n\n\n\n\n\n\nEvents\n\n\nThe Upload library triggers events when processing files, which you can register to by listening to your instance.\n\n\nExample listener:\n\n\nimport Upload from '@livelyvideo/upload';\n\nconst myUpload = new Upload(element, {\n    url: '/my-upload-route'\n});\n\n// myUpload.on(eventName, callbackFunction);\nmyUpload.on('start', () =\n {\n    alert('My upload has started!');\n});\n\n\n\n\nEvent List\n\n\nUpload\n\n\n\n\n\n\n\n\nName\n\n\nParams\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstart\n\n\n(file)\n\n\nCalled at beginning of upload request.\n\n\n\n\n\n\nsuccess\n\n\n(file)\n\n\nCalled after successful upload.\n\n\n\n\n\n\nfailure\n\n\n(file, reason)\n\n\nCalled after upload failure.\n\n\n\n\n\n\nprogress\n\n\n(currentBytes, totalBytes)\n\n\nCalled after chunk has been uploaded. (Not supported in legacy mode)\n\n\n\n\n\n\nthumbnail\n\n\n(file, dataUrl)\n\n\nCalled after thumbnail has been generated. (Not supported in legacy mode)\n\n\n\n\n\n\n\n\nUploadForm\n\n\n\n\nThe UploadForm library includes drag and drop events in addition to Upload events.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nParams\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrop\n\n\n(event)\n\n\nThe user has dropped something into the UploadForm.\n\n\n\n\n\n\ndrag\n\n\n(event)\n\n\nThe user is dragging.\n\n\n\n\n\n\ndragstart\n\n\n(event)\n\n\nThe user started to drag.\n\n\n\n\n\n\ndragend\n\n\n(event)\n\n\nThe user has stopped dragging.\n\n\n\n\n\n\ndragenter\n\n\n(event)\n\n\nThe user dragged a file into the UploadForm.\n\n\n\n\n\n\ndragover\n\n\n(event)\n\n\nThe user is dragging a file over the UploadForm.\n\n\n\n\n\n\ndragleave\n\n\n(event)\n\n\nThe user dragged a file out of the UploadForm.\n\n\n\n\n\n\n\n\nCompatibility\n\n\n\n\nChrome 7+\n\n\nFirefox 4+\n\n\nIE 10+\n\n\nOpera 12+\n\n\nSafari 6+\n\n\n\n\nLegacy Support\n\n\nFor browser that do not have access to HTML5 Drag and Drop and FileReader the uploader can falls back to an old form submission.\n\n\nCross-site iframe transport uploads\n\n\nLegacy support async upload technique, by targeting an iframe on form submission.\nUnfortunately, it is not possible to access the response body of iframes on a different domain.\n\n\nTherefore Cross-site iframe transport uploads require a redirect back to a callback page on the origin server.  All this page needs to do is render json for the client to parse out the results of the upload.  The callback page should look like this:\n\n\n!DOCTYPE HTML\n\n\nhtml lang=\nen\n\n    \nhead\n\n        \nmeta charset=\nutf-8\n\n        \ntitle\nResult Page\n/title\n\n    \n/head\n\n    \nbody\n\n        \n%= response %\n\n    \n/body\n\n\n/html\n\n\n\n\n\nThe api will send back a response which will need to be decoded by your server. The result.html page adds the decoded result content as body content. This allows the plugin to access the response without cross-domain access issues.\n\n\nExample redirect URL sent back to the client:\n\n\nhttp://mydomain.com/result?%7Bstatus:200,reason:%7BSUCCESS_KEY%7D%7D\n\n\n\n\nExample body content decoded by the result.html page:\n\n\n{\nstatus\n:200,\nreason\n:{'SUCCESS_KEY'}}", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#lively-upload", 
            "text": "", 
            "title": "Lively Upload"
        }, 
        {
            "location": "/upload/#installation", 
            "text": "npm install @lively-video/upload --save", 
            "title": "Installation"
        }, 
        {
            "location": "/upload/#usage", 
            "text": "// With UI\nimport Upload from '@lively-video/upload';\nconst upload = new Upload(element, options);\n\n// Without UI\nimport UploadCore from '@lively-video/upload/core';\nconst uploadCore = new UploadCore(element, options);", 
            "title": "Usage"
        }, 
        {
            "location": "/upload/#configuration", 
            "text": "You can customize your Lively Upload by passing an options object when instantiating the library.  Example config:  import Upload from '@lively-video/upload';\n\n// new Upload(targetElement, options);\nconst myUpload = new Upload('#upload', {\n    url: '/my-upload-route'\n});", 
            "title": "Configuration"
        }, 
        {
            "location": "/upload/#configuration-options", 
            "text": "You can supply Upload and UploadForm with either a DOM Element or a selector tag.", 
            "title": "Configuration Options"
        }, 
        {
            "location": "/upload/#upload", 
            "text": "Name  Type  Description      url  (string)  (Required) Route to your upload api.    authUrl  (string)  (Required) Route to your auth api.    token  (string)  Defaults to null. Use custom token.    redirect  (string)  Defaults to null. The redirect route to your results template for cross-origin form compatibility.    supportLegacy  (bool)  Defaults to true. Turn legacy support on or off.    forceLegacy  (bool)  Defaults to false. Helpful option to force use of legacy form for debugging.    autoSubmit  (bool)  Defaults to true. Automatically upload file when added to the uploader.    https  (bool)  Defaults to false. Set protocol.    MESSAGES  (object)  (Localization) Object containing list of message names and message strings.", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#uploadform", 
            "text": "The UploadForm library includes Upload options in addition to these.      Name  Type  Description      clickable  (bool)  Defaults to true. UploadForm element opens file select on click.    title  (string)  Title text    subtitle  (string)  Subtitle text", 
            "title": "UploadForm"
        }, 
        {
            "location": "/upload/#events", 
            "text": "The Upload library triggers events when processing files, which you can register to by listening to your instance.  Example listener:  import Upload from '@livelyvideo/upload';\n\nconst myUpload = new Upload(element, {\n    url: '/my-upload-route'\n});\n\n// myUpload.on(eventName, callbackFunction);\nmyUpload.on('start', () =  {\n    alert('My upload has started!');\n});", 
            "title": "Events"
        }, 
        {
            "location": "/upload/#event-list", 
            "text": "", 
            "title": "Event List"
        }, 
        {
            "location": "/upload/#upload_1", 
            "text": "Name  Params  Description      start  (file)  Called at beginning of upload request.    success  (file)  Called after successful upload.    failure  (file, reason)  Called after upload failure.    progress  (currentBytes, totalBytes)  Called after chunk has been uploaded. (Not supported in legacy mode)    thumbnail  (file, dataUrl)  Called after thumbnail has been generated. (Not supported in legacy mode)", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#uploadform_1", 
            "text": "The UploadForm library includes drag and drop events in addition to Upload events.      Name  Params  Description      drop  (event)  The user has dropped something into the UploadForm.    drag  (event)  The user is dragging.    dragstart  (event)  The user started to drag.    dragend  (event)  The user has stopped dragging.    dragenter  (event)  The user dragged a file into the UploadForm.    dragover  (event)  The user is dragging a file over the UploadForm.    dragleave  (event)  The user dragged a file out of the UploadForm.", 
            "title": "UploadForm"
        }, 
        {
            "location": "/upload/#compatibility", 
            "text": "Chrome 7+  Firefox 4+  IE 10+  Opera 12+  Safari 6+", 
            "title": "Compatibility"
        }, 
        {
            "location": "/upload/#legacy-support", 
            "text": "For browser that do not have access to HTML5 Drag and Drop and FileReader the uploader can falls back to an old form submission.", 
            "title": "Legacy Support"
        }, 
        {
            "location": "/upload/#cross-site-iframe-transport-uploads", 
            "text": "Legacy support async upload technique, by targeting an iframe on form submission.\nUnfortunately, it is not possible to access the response body of iframes on a different domain.  Therefore Cross-site iframe transport uploads require a redirect back to a callback page on the origin server.  All this page needs to do is render json for the client to parse out the results of the upload.  The callback page should look like this:  !DOCTYPE HTML  html lang= en \n     head \n         meta charset= utf-8 \n         title Result Page /title \n     /head \n     body \n         %= response % \n     /body  /html   The api will send back a response which will need to be decoded by your server. The result.html page adds the decoded result content as body content. This allows the plugin to access the response without cross-domain access issues.  Example redirect URL sent back to the client:  http://mydomain.com/result?%7Bstatus:200,reason:%7BSUCCESS_KEY%7D%7D  Example body content decoded by the result.html page:  { status :200, reason :{'SUCCESS_KEY'}}", 
            "title": "Cross-site iframe transport uploads"
        }
    ]
}