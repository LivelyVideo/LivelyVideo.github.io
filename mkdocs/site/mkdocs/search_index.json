{
    "docs": [
        {
            "location": "/", 
            "text": "Lively Video Documentation", 
            "title": "Home"
        }, 
        {
            "location": "/#lively-video-documentation", 
            "text": "", 
            "title": "Lively Video Documentation"
        }, 
        {
            "location": "/svcUpload/", 
            "text": "Upload\n\n\nThis is a simple NodeJS service to act as a backend service for browser-based\nfile uploads. It uses Restify. \n\n\nSummary of Operation\n\n\nThis service accepts files sent by an upload client, either in chunked form \nor via the legacy multipart method. To use the service, the client is expected\nto authenticate itself using the Authorization header (see curl examples below).\nThe service uses the Bearer token included in this header and calls a \nconfigured authorization service to verify the validity of the token. If valid,\nthe upload is allowed to proceed.\n\n\nInstallation and Configuration\n\n\nDeployment Considerations\n\n\n\n\nDepending on your preference, this service can be made available as an \ninstallable tarfile, a npm package downloaded from LivelyVideo's repo, \nor a Docker container available from \nTBD\n repo.\n\n\nIf you are using the npm package, you will need to ensure that you are able\nto connect to and use our repository: it is at \nhttps://npm.livelyvideo.tv\n.\nYou will need authentication credentials or a token along with other settings\nthat should be in the welcome email that you might have received earlier.\n\n\nTo download the project's dependencies, you will want to perform \n\nnpm install\n in the project's working directory. To run unit tests, type\n\nnpm test\n.\n\n\n\n\nDependencies\n\n\nThe service depends on a few Lively Video modules specified in the \n\npackage.json\n file, which are published on https://npm.livelyvideo.tv. \nThese include \n@lively-video/config\n and \n@lively-video/db-mysql\n.\n\n\nConfiguration\n\n\nThe application supports configuration specification by way of a YAML file\n(default \ncfg.yaml\n) with individual settings overridden by environment\nvariables if desired. The settings and the corresponding override environment\nvariables in alphabetical order are as follows:\n\n\n\n\nauthEndpoint\n (env var \nAUTH_EP\n): if defined, this allows the service to \nperform a GET on the specified url as follows: \n\n{authEndPoint}/token/{BearerToken}\n; expected response must be in JSON and \nshould contain a \ntoken\n field. If not defined, reverts to expecting a \nhard-coded value in the request bearer token.\n\n\ncontainer\n (env var \nCONTAINER\n): if defined, application assumes that it is\nrunning in a container. If the value of this variable is \nLC\n, it assumes that\nit is running as a container on localhost, which means that it has full access\nto the configured DB server without any certificates. If value is \nGC\n, then it \nassumes that the DB instance is hosted by Google Cloud with access to the DB\nmanaged by certs defined in \nserver-ca.pem\n, \nclient-key.pem\n, and \n\nclient-cert.pem\n in directory \n../mysql/\n. NOTE: in a Kubernetes environment, \nthe certs directory is mounted as a secrets volume to the container.\n\n\ngcloudProj\n (env var \nGCLOUD_PROJECT\n): define to be able to use Google\nCloud (GC) functionality such as Google Storage.\n\n\nmaxFileSize\n: the maximum filesize that the end-user is allowed to upload.\n\n\nsqlHost\n (env var \nSQL_HOST\n): points to the address of the MariaDB/MySQL\nservice.\n\n\nsqlPass\n (env var \nSQL_USER\n): the DB user to use to connect to the DB\ninstance (default \nroot\n).\n\n\nsqlUser\n (env var \nSQL_PASS\n): the DB password to use for the DB instance\n(default \n''\n).\n\n\nstoreParm\n (env var \nSTORE_PARM\n): A parameter that is relevant for the \n\nstoreType\n below. It could be the name of a directory or a GS bucket.\n\n\nstoreType\n (env var \nSTORE_TYPE\n): Valid values are \nfs\n for the filesystem\nand \ngs\n for Google Storage (default \nfs\n).\n\n\nsvcPort\n (env var \nPORT\n): The port on which the service will listen for\nrequests (default \n3000\n).\n\n\ntmpfsDest\n (env var \nTMPFS_DST\n): A temporary location on the local \nfilesystem where the uploaded file is staged before being moved to the final\ndestination (default \n/tmp\n).\n\n\nvalidExts\n: A space separated list of extensions that are acceptable for the\ninput file. For example, if the value is \ndocx pdf\n, then a file with name\n\nsomething.jpg\n will be rejected by the server. Default value\nis \ngif jpg mp4 mpeg png\n. \n\n\n\n\nRunning Locally\n\n\n\n\nEnsure that you have a local instance of MariaDB or MySQL installed with a \nuser \nroot\n with no password (or define the above environment variables to \nmatch your configuration).\n\n\nRun the scripts in \ndb\n directory on your DB instance (TODO: DB migration tool).\n\n\nTo use the mock authorization API embedded in this server, set the environment\nvariable \nFAKE_AUTH_ENABLE\n to 1. This service accepts almost any bearer token\nsent to it and returns a valid response with a fixed \nuserID\n. However, a bearer\ntoken value of \nevil\n will cause it to return an Authorization error - this is \nto help you test the failed authentication case.\n\n\nExecute \nnode app.js\n to run the service.\n\n\n\n\nEnd-points\n\n\n\n\nServer configuration: GET \n/api/upload/config\n\n\nChunked: POST \n/api/upload\n\n\nMulti-part: POST \n/api/upload/multipart\n\n\n\n\nExample CURL Requests\n\n\nChunked\n\n\n\n\nDiscover file status to determine resume offset: \ncurl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d ''\n\n\nInitiate upload and send chunks: \ncurl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d 'hello'\n\n\nLast chunk: \ncurl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-Last: true' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d ' and bye'\n\n\n\n\nMulti-part\n\n\n\n\nRequest: \ncurl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'Content-Type: multipart/form-data' http://localhost:3000/api/upload/multipart -F \"files=something2-mp.mp4\" -F \"fileBegin=@/tmp/something2\"", 
            "title": "svcUpload"
        }, 
        {
            "location": "/svcUpload/#upload", 
            "text": "This is a simple NodeJS service to act as a backend service for browser-based\nfile uploads. It uses Restify.", 
            "title": "Upload"
        }, 
        {
            "location": "/svcUpload/#summary-of-operation", 
            "text": "This service accepts files sent by an upload client, either in chunked form \nor via the legacy multipart method. To use the service, the client is expected\nto authenticate itself using the Authorization header (see curl examples below).\nThe service uses the Bearer token included in this header and calls a \nconfigured authorization service to verify the validity of the token. If valid,\nthe upload is allowed to proceed.", 
            "title": "Summary of Operation"
        }, 
        {
            "location": "/svcUpload/#installation-and-configuration", 
            "text": "", 
            "title": "Installation and Configuration"
        }, 
        {
            "location": "/svcUpload/#deployment-considerations", 
            "text": "Depending on your preference, this service can be made available as an \ninstallable tarfile, a npm package downloaded from LivelyVideo's repo, \nor a Docker container available from  TBD  repo.  If you are using the npm package, you will need to ensure that you are able\nto connect to and use our repository: it is at  https://npm.livelyvideo.tv .\nYou will need authentication credentials or a token along with other settings\nthat should be in the welcome email that you might have received earlier.  To download the project's dependencies, you will want to perform  npm install  in the project's working directory. To run unit tests, type npm test .", 
            "title": "Deployment Considerations"
        }, 
        {
            "location": "/svcUpload/#dependencies", 
            "text": "The service depends on a few Lively Video modules specified in the  package.json  file, which are published on https://npm.livelyvideo.tv. \nThese include  @lively-video/config  and  @lively-video/db-mysql .", 
            "title": "Dependencies"
        }, 
        {
            "location": "/svcUpload/#configuration", 
            "text": "The application supports configuration specification by way of a YAML file\n(default  cfg.yaml ) with individual settings overridden by environment\nvariables if desired. The settings and the corresponding override environment\nvariables in alphabetical order are as follows:   authEndpoint  (env var  AUTH_EP ): if defined, this allows the service to \nperform a GET on the specified url as follows:  {authEndPoint}/token/{BearerToken} ; expected response must be in JSON and \nshould contain a  token  field. If not defined, reverts to expecting a \nhard-coded value in the request bearer token.  container  (env var  CONTAINER ): if defined, application assumes that it is\nrunning in a container. If the value of this variable is  LC , it assumes that\nit is running as a container on localhost, which means that it has full access\nto the configured DB server without any certificates. If value is  GC , then it \nassumes that the DB instance is hosted by Google Cloud with access to the DB\nmanaged by certs defined in  server-ca.pem ,  client-key.pem , and  client-cert.pem  in directory  ../mysql/ . NOTE: in a Kubernetes environment, \nthe certs directory is mounted as a secrets volume to the container.  gcloudProj  (env var  GCLOUD_PROJECT ): define to be able to use Google\nCloud (GC) functionality such as Google Storage.  maxFileSize : the maximum filesize that the end-user is allowed to upload.  sqlHost  (env var  SQL_HOST ): points to the address of the MariaDB/MySQL\nservice.  sqlPass  (env var  SQL_USER ): the DB user to use to connect to the DB\ninstance (default  root ).  sqlUser  (env var  SQL_PASS ): the DB password to use for the DB instance\n(default  '' ).  storeParm  (env var  STORE_PARM ): A parameter that is relevant for the  storeType  below. It could be the name of a directory or a GS bucket.  storeType  (env var  STORE_TYPE ): Valid values are  fs  for the filesystem\nand  gs  for Google Storage (default  fs ).  svcPort  (env var  PORT ): The port on which the service will listen for\nrequests (default  3000 ).  tmpfsDest  (env var  TMPFS_DST ): A temporary location on the local \nfilesystem where the uploaded file is staged before being moved to the final\ndestination (default  /tmp ).  validExts : A space separated list of extensions that are acceptable for the\ninput file. For example, if the value is  docx pdf , then a file with name something.jpg  will be rejected by the server. Default value\nis  gif jpg mp4 mpeg png .", 
            "title": "Configuration"
        }, 
        {
            "location": "/svcUpload/#running-locally", 
            "text": "Ensure that you have a local instance of MariaDB or MySQL installed with a \nuser  root  with no password (or define the above environment variables to \nmatch your configuration).  Run the scripts in  db  directory on your DB instance (TODO: DB migration tool).  To use the mock authorization API embedded in this server, set the environment\nvariable  FAKE_AUTH_ENABLE  to 1. This service accepts almost any bearer token\nsent to it and returns a valid response with a fixed  userID . However, a bearer\ntoken value of  evil  will cause it to return an Authorization error - this is \nto help you test the failed authentication case.  Execute  node app.js  to run the service.", 
            "title": "Running Locally"
        }, 
        {
            "location": "/svcUpload/#end-points", 
            "text": "Server configuration: GET  /api/upload/config  Chunked: POST  /api/upload  Multi-part: POST  /api/upload/multipart", 
            "title": "End-points"
        }, 
        {
            "location": "/svcUpload/#example-curl-requests", 
            "text": "", 
            "title": "Example CURL Requests"
        }, 
        {
            "location": "/svcUpload/#chunked", 
            "text": "Discover file status to determine resume offset:  curl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d ''  Initiate upload and send chunks:  curl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d 'hello'  Last chunk:  curl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'X-Last: true' -H 'X-File-Name: something2.mpg'  http://localhost:3000/api/upload -d ' and bye'", 
            "title": "Chunked"
        }, 
        {
            "location": "/svcUpload/#multi-part", 
            "text": "Request:  curl -ikL -XPOST -H 'Authorization: Bearer xxx' -H 'Content-Type: multipart/form-data' http://localhost:3000/api/upload/multipart -F \"files=something2-mp.mp4\" -F \"fileBegin=@/tmp/something2\"", 
            "title": "Multi-part"
        }, 
        {
            "location": "/upload/", 
            "text": "Lively Upload\n\n\nInstallation\n\n\nnpm install @lively-video/upload --save\n\n\n\n\nUsage\n\n\n// With UI\nimport Upload from '@lively-video/upload';\nconst upload = new Upload(element, options);\n\n// Without UI\nimport UploadCore from '@lively-video/upload/core';\nconst uploadCore = new UploadCore(element, options);\n\n\n\n\nConfiguration\n\n\nYou can customize your Lively Upload by passing an options object when instantiating the library.\n\n\nExample config:\n\n\nimport Upload from '@lively-video/upload';\n\n// new Upload(targetElement, options);\nconst myUpload = new Upload('#upload', {\n    url: '/my-upload-route'\n});\n\n\n\n\nConfiguration Options\n\n\n\n\nYou can supply Upload and UploadForm with either a DOM Element or a selector tag.\n\n\n\n\nUpload\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\n(string)\n\n\n(Required) Route to your upload api.\n\n\n\n\n\n\nauthUrl\n\n\n(string)\n\n\n(Required) Route to your auth api.\n\n\n\n\n\n\ntoken\n\n\n(string)\n\n\nDefaults to null. Use custom token.\n\n\n\n\n\n\nredirect\n\n\n(string)\n\n\nDefaults to null. The redirect route to your results template for cross-origin form compatibility.\n\n\n\n\n\n\nsupportLegacy\n\n\n(bool)\n\n\nDefaults to true. Turn legacy support on or off.\n\n\n\n\n\n\nforceLegacy\n\n\n(bool)\n\n\nDefaults to false. Helpful option to force use of legacy form for debugging.\n\n\n\n\n\n\nautoSubmit\n\n\n(bool)\n\n\nDefaults to true. Automatically upload file when added to the uploader.\n\n\n\n\n\n\nhttps\n\n\n(bool)\n\n\nDefaults to false. Set protocol.\n\n\n\n\n\n\nMESSAGES\n\n\n(object)\n\n\n(Localization) Object containing list of message names and message strings.\n\n\n\n\n\n\n\n\nUploadForm\n\n\n\n\nThe UploadForm library includes Upload options in addition to these.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclickable\n\n\n(bool)\n\n\nDefaults to true. UploadForm element opens file select on click.\n\n\n\n\n\n\ntitle\n\n\n(string)\n\n\nTitle text\n\n\n\n\n\n\nsubtitle\n\n\n(string)\n\n\nSubtitle text\n\n\n\n\n\n\n\n\nEvents\n\n\nThe Upload library triggers events when processing files, which you can register to by listening to your instance.\n\n\nExample listener:\n\n\nimport Upload from '@livelyvideo/upload';\n\nconst myUpload = new Upload(element, {\n    url: '/my-upload-route'\n});\n\n// myUpload.on(eventName, callbackFunction);\nmyUpload.on('start', () =\n {\n    alert('My upload has started!');\n});\n\n\n\n\nEvent List\n\n\nUpload\n\n\n\n\n\n\n\n\nName\n\n\nParams\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstart\n\n\n(file)\n\n\nCalled at beginning of upload request.\n\n\n\n\n\n\nsuccess\n\n\n(file)\n\n\nCalled after successful upload.\n\n\n\n\n\n\nfailure\n\n\n(file, reason)\n\n\nCalled after upload failure.\n\n\n\n\n\n\nprogress\n\n\n(currentBytes, totalBytes)\n\n\nCalled after chunk has been uploaded. (Not supported in legacy mode)\n\n\n\n\n\n\nthumbnail\n\n\n(file, dataUrl)\n\n\nCalled after thumbnail has been generated. (Not supported in legacy mode)\n\n\n\n\n\n\n\n\nUploadForm\n\n\n\n\nThe UploadForm library includes drag and drop events in addition to Upload events.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nParams\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndrop\n\n\n(event)\n\n\nThe user has dropped something into the UploadForm.\n\n\n\n\n\n\ndrag\n\n\n(event)\n\n\nThe user is dragging.\n\n\n\n\n\n\ndragstart\n\n\n(event)\n\n\nThe user started to drag.\n\n\n\n\n\n\ndragend\n\n\n(event)\n\n\nThe user has stopped dragging.\n\n\n\n\n\n\ndragenter\n\n\n(event)\n\n\nThe user dragged a file into the UploadForm.\n\n\n\n\n\n\ndragover\n\n\n(event)\n\n\nThe user is dragging a file over the UploadForm.\n\n\n\n\n\n\ndragleave\n\n\n(event)\n\n\nThe user dragged a file out of the UploadForm.\n\n\n\n\n\n\n\n\nCompatibility\n\n\n\n\nChrome 7+\n\n\nFirefox 4+\n\n\nIE 10+\n\n\nOpera 12+\n\n\nSafari 6+\n\n\n\n\nLegacy Support\n\n\nFor browser that do not have access to HTML5 Drag and Drop and FileReader the uploader can falls back to an old form submission.\n\n\nCross-site iframe transport uploads\n\n\nLegacy support async upload technique, by targeting an iframe on form submission.\nUnfortunately, it is not possible to access the response body of iframes on a different domain.\n\n\nTherefore Cross-site iframe transport uploads require a redirect back to a callback page on the origin server.  All this page needs to do is render json for the client to parse out the results of the upload.  The callback page should look like this:\n\n\n!DOCTYPE HTML\n\n\nhtml lang=\nen\n\n    \nhead\n\n        \nmeta charset=\nutf-8\n\n        \ntitle\nResult Page\n/title\n\n    \n/head\n\n    \nbody\n\n        \n%= response %\n\n    \n/body\n\n\n/html\n\n\n\n\n\nThe api will send back a response which will need to be decoded by your server. The result.html page adds the decoded result content as body content. This allows the plugin to access the response without cross-domain access issues.\n\n\nExample redirect URL sent back to the client:\n\n\nhttp://mydomain.com/result?%7Bstatus:200,reason:%7BSUCCESS_KEY%7D%7D\n\n\n\n\nExample body content decoded by the result.html page:\n\n\n{\nstatus\n:200,\nreason\n:{'SUCCESS_KEY'}}", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#lively-upload", 
            "text": "", 
            "title": "Lively Upload"
        }, 
        {
            "location": "/upload/#installation", 
            "text": "npm install @lively-video/upload --save", 
            "title": "Installation"
        }, 
        {
            "location": "/upload/#usage", 
            "text": "// With UI\nimport Upload from '@lively-video/upload';\nconst upload = new Upload(element, options);\n\n// Without UI\nimport UploadCore from '@lively-video/upload/core';\nconst uploadCore = new UploadCore(element, options);", 
            "title": "Usage"
        }, 
        {
            "location": "/upload/#configuration", 
            "text": "You can customize your Lively Upload by passing an options object when instantiating the library.  Example config:  import Upload from '@lively-video/upload';\n\n// new Upload(targetElement, options);\nconst myUpload = new Upload('#upload', {\n    url: '/my-upload-route'\n});", 
            "title": "Configuration"
        }, 
        {
            "location": "/upload/#configuration-options", 
            "text": "You can supply Upload and UploadForm with either a DOM Element or a selector tag.", 
            "title": "Configuration Options"
        }, 
        {
            "location": "/upload/#upload", 
            "text": "Name  Type  Description      url  (string)  (Required) Route to your upload api.    authUrl  (string)  (Required) Route to your auth api.    token  (string)  Defaults to null. Use custom token.    redirect  (string)  Defaults to null. The redirect route to your results template for cross-origin form compatibility.    supportLegacy  (bool)  Defaults to true. Turn legacy support on or off.    forceLegacy  (bool)  Defaults to false. Helpful option to force use of legacy form for debugging.    autoSubmit  (bool)  Defaults to true. Automatically upload file when added to the uploader.    https  (bool)  Defaults to false. Set protocol.    MESSAGES  (object)  (Localization) Object containing list of message names and message strings.", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#uploadform", 
            "text": "The UploadForm library includes Upload options in addition to these.      Name  Type  Description      clickable  (bool)  Defaults to true. UploadForm element opens file select on click.    title  (string)  Title text    subtitle  (string)  Subtitle text", 
            "title": "UploadForm"
        }, 
        {
            "location": "/upload/#events", 
            "text": "The Upload library triggers events when processing files, which you can register to by listening to your instance.  Example listener:  import Upload from '@livelyvideo/upload';\n\nconst myUpload = new Upload(element, {\n    url: '/my-upload-route'\n});\n\n// myUpload.on(eventName, callbackFunction);\nmyUpload.on('start', () =  {\n    alert('My upload has started!');\n});", 
            "title": "Events"
        }, 
        {
            "location": "/upload/#event-list", 
            "text": "", 
            "title": "Event List"
        }, 
        {
            "location": "/upload/#upload_1", 
            "text": "Name  Params  Description      start  (file)  Called at beginning of upload request.    success  (file)  Called after successful upload.    failure  (file, reason)  Called after upload failure.    progress  (currentBytes, totalBytes)  Called after chunk has been uploaded. (Not supported in legacy mode)    thumbnail  (file, dataUrl)  Called after thumbnail has been generated. (Not supported in legacy mode)", 
            "title": "Upload"
        }, 
        {
            "location": "/upload/#uploadform_1", 
            "text": "The UploadForm library includes drag and drop events in addition to Upload events.      Name  Params  Description      drop  (event)  The user has dropped something into the UploadForm.    drag  (event)  The user is dragging.    dragstart  (event)  The user started to drag.    dragend  (event)  The user has stopped dragging.    dragenter  (event)  The user dragged a file into the UploadForm.    dragover  (event)  The user is dragging a file over the UploadForm.    dragleave  (event)  The user dragged a file out of the UploadForm.", 
            "title": "UploadForm"
        }, 
        {
            "location": "/upload/#compatibility", 
            "text": "Chrome 7+  Firefox 4+  IE 10+  Opera 12+  Safari 6+", 
            "title": "Compatibility"
        }, 
        {
            "location": "/upload/#legacy-support", 
            "text": "For browser that do not have access to HTML5 Drag and Drop and FileReader the uploader can falls back to an old form submission.", 
            "title": "Legacy Support"
        }, 
        {
            "location": "/upload/#cross-site-iframe-transport-uploads", 
            "text": "Legacy support async upload technique, by targeting an iframe on form submission.\nUnfortunately, it is not possible to access the response body of iframes on a different domain.  Therefore Cross-site iframe transport uploads require a redirect back to a callback page on the origin server.  All this page needs to do is render json for the client to parse out the results of the upload.  The callback page should look like this:  !DOCTYPE HTML  html lang= en \n     head \n         meta charset= utf-8 \n         title Result Page /title \n     /head \n     body \n         %= response % \n     /body  /html   The api will send back a response which will need to be decoded by your server. The result.html page adds the decoded result content as body content. This allows the plugin to access the response without cross-domain access issues.  Example redirect URL sent back to the client:  http://mydomain.com/result?%7Bstatus:200,reason:%7BSUCCESS_KEY%7D%7D  Example body content decoded by the result.html page:  { status :200, reason :{'SUCCESS_KEY'}}", 
            "title": "Cross-site iframe transport uploads"
        }
    ]
}